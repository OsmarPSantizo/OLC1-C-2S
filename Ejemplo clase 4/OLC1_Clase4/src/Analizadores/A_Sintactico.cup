
/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes
package Analizadores;
import java_cup.runtime.Symbol; 
import java.util.LinkedList;
import olc1_clase4.Ventana;
import olc1_clase4.Nodo;

//------> Codigo para el parser,variables, metodos
parser code{:

        //Podemos crear variables, listas, etc;
        // deben de ser staticas si se quieren usar fuera
         
        public static Nodo raiz;
        
        public Nodo getRaiz(){
            return raiz;
        }
        

        public void syntax_error(Symbol s)
        {
            System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
            System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        }
        
:}

//------> Codigo para las acciones gramaticales
action code
{:  :}

/*--------------- 2da Area: Declaraciones -----------------------*/

//------> declaracion de terminales 

terminal String mas, menos, por, div, menorque, mayorque, pyc, igual, para, parc, js_let, js_const, js_var, digito, decimal, id, cadena, unario;

//------> declaracion de no terminales
non terminal Nodo INICIO, INSTRUCCIONES;
non terminal Nodo INSTRUCCION, DECLARACION;
non terminal Nodo E;

//------> precedencia

precedence left menorque, mayorque;
precedence left mas, menos;
precedence left por, div;
precedence left unario;


start with INICIO;

/*--------------- 3ra Area: Reglas Semanticas 
let a = 30;
var variable = 14 * 3 + 13.50;
const compi1 = "si sale";

-----------------------*/

INICIO::= INSTRUCCIONES:a    {: parser.raiz = a; :}     //guardamos la raiz de nuestro arbol
       ;

INSTRUCCIONES::= INSTRUCCIONES:a INSTRUCCION:b          {: Nodo padre = new Nodo("INSTRUCCIONES", "", 0,0);             //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                        padre.AddHijo(a); 
                                                        padre.AddHijo(b); 
                                                        RESULT = padre;                                                 //retornamos el nodo padre
                                                    :}
                | INSTRUCCION:a                       {: Nodo padre = new Nodo("INSTRUCCIONES", "", 0,0);  
                                                        padre.AddHijo(a); 
                                                        RESULT = padre;                                               //retornamos el nodo padre      
                                                    :}
                ;

INSTRUCCION::= DECLARACION:a    {: RESULT= a;:}         // retornamos el nodo que viene ya creado de declaracion
            ; 

DECLARACION ::= js_let:a id:b igual:c E:d pyc:e     {: Nodo padre = new Nodo("DECLARACION", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                                                        padre.AddHijo(new Nodo("let", a, aright, aleft));               //agregamos como hijo la palabra reservada let
                                                        padre.AddHijo(new Nodo("identificador", b, bright, bleft));     //agregamos como hijo el identificador de la declaracion
                                                        padre.AddHijo(new Nodo("igual", c, cright, cleft));             //agregamos como hijo el signo igual
                                                        padre.AddHijo(d);                                               //agregamos como hijo el nodo que retorno la expresion 
                                                        padre.AddHijo(new Nodo("pyc", e, eright, eleft));               //agregamos como hijo el punto y coma
                                                        RESULT = padre;                                                 //retornamos el nodo padre
                                                    :}
              | js_var:a id:b igual:c E:d pyc:e     {: Nodo padre = new Nodo("DECLARACION", "", 0,0); 
                                                        padre.AddHijo(new Nodo("var", a, aright, aleft));
                                                        padre.AddHijo(new Nodo("identificador", b, bright, bleft));
                                                        padre.AddHijo(new Nodo("igual", c, cright, cleft));
                                                        padre.AddHijo(d);
                                                        padre.AddHijo(new Nodo("pyc", e, eright, eleft));
                                                        RESULT = padre;                                                 
                                                    :}
              | js_const:a id:b igual:c E:d pyc:e   {: Nodo padre = new Nodo("DECLARACION", "", 0,0); 
                                                        padre.AddHijo(new Nodo("const", a, aright, aleft));
                                                        padre.AddHijo(new Nodo("identificador", b, bright, bleft));
                                                        padre.AddHijo(new Nodo("igual", c, cright, cleft));
                                                        padre.AddHijo(d);
                                                        padre.AddHijo(new Nodo("pyc", e, eright, eleft));
                                                        RESULT = padre;                                                 
                                                    :}
              ;

E::= E:a mas:b E:c    {: Nodo padre = new Nodo("E", "", 0,0);                   //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                        padre.AddHijo(a);                                       //agregamos como hijo el nodo que retorno la expresion
                        padre.AddHijo(new Nodo("mas", b, bright, bleft));       //agregamos como hijo el signo mas
                        padre.AddHijo(c);                                       //agregamos como hijo el nodo que retorno la expresion
                        RESULT = padre;                                         //retornamos el nodo padre
                    :}
   | E:a menos:b E:c  {: Nodo padre = new Nodo("E", "", 0,0); 
                        padre.AddHijo(a);
                        padre.AddHijo(new Nodo("menos", b, bright, bleft));
                        padre.AddHijo(c);
                        RESULT = padre;                                            
                    :}
   | E:a por:b E:c    {: Nodo padre = new Nodo("E", "", 0,0); 
                        padre.AddHijo(a);
                        padre.AddHijo(new Nodo("por", b, bright, bleft));
                        padre.AddHijo(c);
                        RESULT = padre;                                        
                    :}
   | E:a div:b E:c    {: Nodo padre = new Nodo("E", "", 0,0); 
                        padre.AddHijo(a);
                        padre.AddHijo(new Nodo("div", b, bright, bleft));
                        padre.AddHijo(c);
                        RESULT = padre;                                         
                    :}
   | E:a menorque:b E:c {: Nodo padre = new Nodo("E", "", 0,0); 
                        padre.AddHijo(a);
                        padre.AddHijo(new Nodo("menorque", b, bright, bleft));
                        padre.AddHijo(c);
                        RESULT = padre;                                         
                    :}
   | E:a mayorque:b E:c {: Nodo padre = new Nodo("E", "", 0,0); 
                        padre.AddHijo(a);
                        padre.AddHijo(new Nodo("mayorque", b, bright, bleft));
                        padre.AddHijo(c);
                        RESULT = padre;                                         
                    :}
   | para:a E:b parc:c  {: Nodo padre = new Nodo("E", "", 0,0);                 //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                        padre.AddHijo(new Nodo("para", a, aright, aleft));      //agregamos como hijo el parentesis que abre
                        padre.AddHijo(b);                                       //agregamos como hijo la expresion
                        padre.AddHijo(new Nodo("parc", c, cright, cleft));      //agregamos como hijo el parentesis que cierra
                        RESULT = padre;                                         //retornamos el nodo padre
                    :}
   | menos:a E:b      {: Nodo padre = new Nodo("E", "", 0,0); 
                        padre.AddHijo(new Nodo("menos", a, aright, aleft));
                        padre.AddHijo(b);
                        RESULT = padre;                                         
                    :} %prec unario                                             
   | digito:a       {: Nodo padre = new Nodo("E", "", 0,0);                     //creamos un nodo padre identificandolo con el nombre del no terminal del lado izq de la produccion 
                        padre.AddHijo(new Nodo("digito", a, aright, aleft));    //agregamos como hijo el digito
                        RESULT = padre;                                         //retornamos el nodo padre
                    :}  
   | cadena:a       {: Nodo padre = new Nodo("E", "", 0,0); 
                        padre.AddHijo(new Nodo("cadena", a, aright, aleft));    
                        RESULT = padre;                                         
                    :}  
   | decimal:a      {: Nodo padre = new Nodo("E", "", 0,0); 
                        padre.AddHijo(new Nodo("decimal", a, aright, aleft));   
                        RESULT = padre;                                         
                    :} 
   | id:variable    {: Nodo padre = new Nodo("E", "", 0,0);             
                        padre.AddHijo(new Nodo("identificador", variable, variableright, variableleft));      
                        RESULT = padre;                                                                                                    
                    :}    
   ;    







