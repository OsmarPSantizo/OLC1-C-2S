
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import olc1_clase4.Comparar;
import java.util.LinkedList;
import Reportes.Caracteristica;
import Reportes.GBarras;
import Reportes.Valor;
import Reportes.Variables;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico_FCA extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos_FCA.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico_FCA() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico_FCA(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico_FCA(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\011\000\002\006\006\000" +
    "\002\013\006\000\002\014\010\000\002\014\010\000\002" +
    "\014\007\000\002\014\007\000\002\007\004\000\002\007" +
    "\003\000\002\010\006\000\002\010\010\000\002\010\010" +
    "\000\002\010\006\000\002\010\006\000\002\011\005\000" +
    "\002\011\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\014\000\002\012" +
    "\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\004\012\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\010\013\013\015\011\035\010\001\002\000\004\005" +
    "\110\001\002\000\004\005\030\001\002\000\012\006\ufffd" +
    "\013\ufffd\015\ufffd\035\ufffd\001\002\000\004\007\022\001" +
    "\002\000\012\006\ufffe\013\ufffe\015\ufffe\035\ufffe\001\002" +
    "\000\012\006\ufffb\013\ufffb\015\ufffb\035\ufffb\001\002\000" +
    "\012\006\021\013\013\015\011\035\010\001\002\000\012" +
    "\006\ufffc\013\ufffc\015\ufffc\035\ufffc\001\002\000\012\006" +
    "\uffff\013\uffff\015\uffff\035\uffff\001\002\000\004\002\000" +
    "\001\002\000\004\014\023\001\002\000\004\004\024\001" +
    "\002\000\004\014\025\001\002\000\004\010\026\001\002" +
    "\000\004\011\027\001\002\000\012\006\ufffa\013\ufffa\015" +
    "\ufffa\035\ufffa\001\002\000\014\016\032\017\034\020\036" +
    "\021\037\022\035\001\002\000\016\006\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\001\002\000\004\026\105" +
    "\001\002\000\016\006\104\016\032\017\034\020\036\021" +
    "\037\022\035\001\002\000\004\026\076\001\002\000\004" +
    "\026\073\001\002\000\004\026\063\001\002\000\004\026" +
    "\040\001\002\000\020\014\043\023\041\024\042\025\050" +
    "\031\046\032\044\036\045\001\002\000\010\004\uffe9\011" +
    "\uffe9\030\uffe9\001\002\000\010\004\uffea\011\uffea\030\uffea" +
    "\001\002\000\010\004\uffe7\011\uffe7\030\uffe7\001\002\000" +
    "\010\004\uffe4\011\uffe4\030\uffe4\001\002\000\004\005\052" +
    "\001\002\000\010\004\uffe5\011\uffe5\030\uffe5\001\002\000" +
    "\004\011\051\001\002\000\010\004\uffe8\011\uffe8\030\uffe8" +
    "\001\002\000\016\006\uffee\016\uffee\017\uffee\020\uffee\021" +
    "\uffee\022\uffee\001\002\000\004\031\053\001\002\000\004" +
    "\004\054\001\002\000\004\014\055\001\002\000\004\004" +
    "\056\001\002\000\004\014\057\001\002\000\004\004\060" +
    "\001\002\000\004\014\061\001\002\000\004\006\062\001" +
    "\002\000\010\004\uffe6\011\uffe6\030\uffe6\001\002\000\004" +
    "\027\064\001\002\000\020\014\043\023\041\024\042\025" +
    "\050\031\046\032\044\036\045\001\002\000\006\004\uffeb" +
    "\030\uffeb\001\002\000\006\004\070\030\067\001\002\000" +
    "\004\011\072\001\002\000\020\014\043\023\041\024\042" +
    "\025\050\031\046\032\044\036\045\001\002\000\006\004" +
    "\uffec\030\uffec\001\002\000\016\006\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\001\002\000\020\014\043\023" +
    "\041\024\042\025\050\031\046\032\044\036\045\001\002" +
    "\000\004\011\075\001\002\000\016\006\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\001\002\000\004\027\077" +
    "\001\002\000\020\014\043\023\041\024\042\025\050\031" +
    "\046\032\044\036\045\001\002\000\006\004\070\030\101" +
    "\001\002\000\004\011\102\001\002\000\016\006\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\001\002\000\016" +
    "\006\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\001" +
    "\002\000\012\006\ufff9\013\ufff9\015\ufff9\035\ufff9\001\002" +
    "\000\020\014\043\023\041\024\042\025\050\031\046\032" +
    "\044\036\045\001\002\000\004\011\107\001\002\000\016" +
    "\006\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\001" +
    "\002\000\006\033\112\034\111\001\002\000\004\025\133" +
    "\001\002\000\004\025\127\001\002\000\010\006\116\033" +
    "\115\034\114\001\002\000\004\025\123\001\002\000\004" +
    "\025\117\001\002\000\012\006\ufff8\013\ufff8\015\ufff8\035" +
    "\ufff8\001\002\000\004\037\120\001\002\000\020\014\043" +
    "\023\041\024\042\025\050\031\046\032\044\036\045\001" +
    "\002\000\004\011\122\001\002\000\010\006\ufff6\033\ufff6" +
    "\034\ufff6\001\002\000\004\037\124\001\002\000\020\014" +
    "\043\023\041\024\042\025\050\031\046\032\044\036\045" +
    "\001\002\000\004\011\126\001\002\000\010\006\ufff7\033" +
    "\ufff7\034\ufff7\001\002\000\004\037\130\001\002\000\020" +
    "\014\043\023\041\024\042\025\050\031\046\032\044\036" +
    "\045\001\002\000\004\011\132\001\002\000\010\006\ufff4" +
    "\033\ufff4\034\ufff4\001\002\000\004\037\134\001\002\000" +
    "\020\014\043\023\041\024\042\025\050\031\046\032\044" +
    "\036\045\001\002\000\004\011\136\001\002\000\010\006" +
    "\ufff5\033\ufff5\034\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\015\004\013" +
    "\005\011\006\016\013\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\017\005\011\006" +
    "\016\013\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\032\010\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\065\012\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\077\012\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\134\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico_FCA$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico_FCA$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico_FCA$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public String resultado = "";
        public static LinkedList<Object> instrucciones;
        
        

        public void syntax_error(Symbol s)
        {
            System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
            System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico_FCA$actions {

  
  private final Sintactico_FCA parser;

  /** Constructor */
  CUP$Sintactico_FCA$actions(Sintactico_FCA parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico_FCA$do_action_part00000000(
    int                        CUP$Sintactico_FCA$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_FCA$parser,
    java.util.Stack            CUP$Sintactico_FCA$stack,
    int                        CUP$Sintactico_FCA$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico_FCA$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico_FCA$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico_FCA$parser.done_parsing();
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= gre llava INSTRUCCIONES llavc 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).value;
		 instrucciones = a;  
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a);  
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= COMPARE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).right;
		Comparar a = (Comparar)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= GRAFICA_BARRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).right;
		GBarras a = (GBarras)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DEF_GLOBALES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).right;
		LinkedList<Variables> a = (LinkedList<Variables>)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COMPARE ::= comp para cadena coma cadena parc pyc 
            {
              Comparar RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-2)).value;
		 RESULT = new Comparar(a.substring(1,a.length()-1),b.substring(1,b.length()-1)); //le quitamos las comillas a las cadenas 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("COMPARE",3, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GRAFICA_BARRAS ::= gbarras llava CARACTERISTICAS llavc 
            {
              GBarras RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).right;
		LinkedList<Caracteristica> a = (LinkedList<Caracteristica>)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).value;
		 RESULT = new GBarras(a); 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("GRAFICA_BARRAS",4, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEF_GLOBALES ::= defglobal llava LISTA_VARIABLES llavc 
            {
              LinkedList<Variables> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).right;
		LinkedList<Variables> a = (LinkedList<Variables>)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("DEF_GLOBALES",9, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA_VARIABLES ::= LISTA_VARIABLES doble id igual VALOR pyc 
            {
              LinkedList<Variables> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-5)).right;
		LinkedList<Variables> a = (LinkedList<Variables>)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).right;
		Valor c = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).value;
		 RESULT = a; RESULT.add(new Variables(2, b, c)); 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES",10, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTA_VARIABLES ::= LISTA_VARIABLES cadstring id igual VALOR pyc 
            {
              LinkedList<Variables> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-5)).right;
		LinkedList<Variables> a = (LinkedList<Variables>)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).right;
		Valor c = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).value;
		 RESULT = a; RESULT.add(new Variables(1, b, c)); 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES",10, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA_VARIABLES ::= doble id igual VALOR pyc 
            {
              LinkedList<Variables> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).right;
		Valor b = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).value;
		 RESULT = new LinkedList<>();  RESULT.add(new Variables(2, a, b)); 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES",10, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA_VARIABLES ::= cadstring id igual VALOR pyc 
            {
              LinkedList<Variables> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).right;
		Valor b = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).value;
		 RESULT = new LinkedList<>();  RESULT.add(new Variables(1, a, b)); 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES",10, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CARACTERISTICAS ::= CARACTERISTICAS CARACTERISTICA 
            {
              LinkedList<Caracteristica> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).right;
		LinkedList<Caracteristica> a = (LinkedList<Caracteristica>)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).right;
		Caracteristica b = (Caracteristica)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("CARACTERISTICAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CARACTERISTICAS ::= CARACTERISTICA 
            {
              LinkedList<Caracteristica> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).right;
		Caracteristica a = (Caracteristica)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a);  
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("CARACTERISTICAS",5, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CARACTERISTICA ::= titulo dospnts VALOR pyc 
            {
              Caracteristica RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).right;
		Valor a = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).value;
		 RESULT = new Caracteristica(0,a); 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA",6, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CARACTERISTICA ::= ejex dospnts cora VALORES corc pyc 
            {
              Caracteristica RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-2)).right;
		LinkedList<Valor> a = (LinkedList<Valor>)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-2)).value;
		 RESULT = new Caracteristica(1,a); 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA",6, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CARACTERISTICA ::= valores dospnts cora VALORES corc pyc 
            {
              Caracteristica RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-2)).right;
		LinkedList<Valor> a = (LinkedList<Valor>)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-2)).value;
		 RESULT = new Caracteristica(2,a); 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA",6, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CARACTERISTICA ::= titulox dospnts VALOR pyc 
            {
              Caracteristica RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).right;
		Valor a = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).value;
		 RESULT = new Caracteristica(3,a); 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA",6, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CARACTERISTICA ::= tituloy dospnts VALOR pyc 
            {
              Caracteristica RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).right;
		Valor a = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).value;
		 RESULT = new Caracteristica(4,a); 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA",6, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VALORES ::= VALORES coma VALOR 
            {
              LinkedList<Valor> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-2)).right;
		LinkedList<Valor> a = (LinkedList<Valor>)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).right;
		Valor b = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("VALORES",7, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VALORES ::= VALOR 
            {
              LinkedList<Valor> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).right;
		Valor a = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a);  
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("VALORES",7, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VALOR ::= decimal 
            {
              Valor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.peek()).value;
		 RESULT = new Valor(1, new Double(a)); 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VALOR ::= digito 
            {
              Valor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.peek()).value;
		 RESULT = new Valor(2, new Integer(a)); 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALOR ::= id 
            {
              Valor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.peek()).value;
		 RESULT = new Valor(3, a); 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALOR ::= cadena 
            {
              Valor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.peek()).value;
		 RESULT = new Valor(4, a.substring(1,a.length()-1)); 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALOR ::= dolar llava pntesp coma cadena coma cadena coma cadena llavc 
            {
              Valor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-1)).value;
		 RESULT = new Valor(5, b.substring(1,b.length()-1), c.substring(1,c.length()-1), d.substring(1,d.length()-1) ); 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.elementAt(CUP$Sintactico_FCA$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALOR ::= pntesp 
            {
              Valor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.peek()).value;
		 RESULT = new Valor(3, a); 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALOR ::= pntgen 
            {
              Valor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico_FCA$stack.peek()).value;
		 RESULT = new Valor(3, a); 
              CUP$Sintactico_FCA$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_FCA$stack.peek()), RESULT);
            }
          return CUP$Sintactico_FCA$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico_FCA$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico_FCA$do_action(
    int                        CUP$Sintactico_FCA$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_FCA$parser,
    java.util.Stack            CUP$Sintactico_FCA$stack,
    int                        CUP$Sintactico_FCA$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico_FCA$do_action_part00000000(
                               CUP$Sintactico_FCA$act_num,
                               CUP$Sintactico_FCA$parser,
                               CUP$Sintactico_FCA$stack,
                               CUP$Sintactico_FCA$top);
    }
}

}
